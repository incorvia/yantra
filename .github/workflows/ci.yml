# .github/workflows/ci.yml

name: Ruby Gem CI (PostgreSQL)

# Controls when the workflow will run
on:
  push:
    branches: [ main ] # Or your default branch
  pull_request:
    branches: [ main ] # Or your default branch

jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Define a matrix strategy to test against multiple Ruby versions
    strategy:
      matrix:
        # Specify the Ruby versions you want to support and test against
        ruby-version: ['3.0', '3.1', '3.2', '3.3'] # Adjust as needed

    # --- ADDED: PostgreSQL Service Container ---
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:14 # Choose desired PostgreSQL version
        # Environment variables for the container (matching database.yml defaults/ENV)
        env:
          POSTGRES_DB: yantra_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password # Use a simple password for CI
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 5432 on service container to 5432 on the runner host
          - 5432:5432
    # --- END SERVICE ---

    steps:
      # 1. Check out repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Ruby environment
      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          # Cache gems using Bundler for faster builds
          bundler-cache: true # This runs bundle install

      # 3. Install system dependencies (PostgreSQL client libs)
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y libpq-dev

      # 4. Install gem dependencies (handled by bundler-cache: true)

      # 5. Set up the dummy app's test database
      - name: Set up test database
        # Set environment variables needed by database.yml and Rails
        # Note: PGHOST is set to 127.0.0.1 because the service port is mapped to the host runner
        env:
          RAILS_ENV: test
          PGHOST: 127.0.0.1 # Or localhost
          PGPORT: 5432 # Matches the service port mapping
          PGUSER: postgres # Matches service env
          PGPASSWORD: password # Matches service env
        run: |
          bundle exec rails db:create db:schema:load RAILS_ENV=test
        # Run this command within the dummy app directory
        working-directory: test/dummy

      # 6. Run tests
      - name: Run tests
        # Pass environment variables to the test execution context
        env:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGPORT: 5432
          PGUSER: postgres
          PGPASSWORD: password
        run: bundle exec rake test


